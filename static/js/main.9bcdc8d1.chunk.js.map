{"version":3,"sources":["logo.svg","components/FeatureSymbol.js","components/GridTile.js","components/GridComponent.js","dataClasses/tileClass.js","dataClasses/gridClass.js","dataClasses/beeClass.js","dataClasses/hiveClass.js","dataClasses/worldClass.js","components/OptionsController.js","components/EndDialog.js","pages/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["FeatureSymbol","props","feature","style","name","EmojiNature","Warning","LocalFlorist","featureIcon","fontSize","marginTop","chance","charges","featureExtraInfo","GridTile","numBees","location","xLoc","yLoc","status","deadBees","styles","parentDiv","position","display","height","width","borderStyle","borderWidth","beeDiv","top","right","featureDiv","left","transform","locationDiv","bottom","deadBeeDiv","borderColor","backgroundColor","getParentStyle","Grid","fullModel","gridModel","fullGridModel","tile","gridJSX","x","tiles","y","push","console","log","generateGrid","TileClass","this","newFeature","GridClass","mapOptions","maxHeight","maxWidth","numDanger","numFood","seed","generateBaseGridModel","gridAddFeatures","updateBorderExploreTiles","workingGrid","numDangers","gridAsList","gridAddHive","gridAddFood","gridAddDanger","i","tempLoc","Math","floor","random","length","splice","hiveLoc","hiveLocation","grid","exploredTiles","getExploredtiles","updateExploreNeighbors","exploredArray","foodTileArray","newLocation","BeeClass","beeKey","alive","key","worldGrid","memory","JSON","parse","stringify","model","removeBee","moveTile","addDeadBee","addBee","planning","avoidArray","exploreArray","findToExplore","removeAvoids","moveToTile","gatherArray","getFoodTiles","subtractFood","avoid","avoidX","avoidY","explore","exploreX","exploreY","HiveClass","gridClass","beeArray","unexploredTileArray","sharingMemory","hiveMemory","generateBees","bee","avoidTiles","explorePhase","gatherTile","gatherPhase","syncBeeMemories","tempMemory","getMemory","syncToHiveMemory","map","syncToBeeMemory","copyMemory","WorldClass","gameplayOptions","turnTracker","subTurnCycle","endCase","subTurnCycleActive","hive","turnDisplay","updateTurnDisplay","executeTurn","workingDisplay","stage","startStage","exploreStage","syncStage","gatherStage","checkEndCases","startPhase","syncPhase","checkBeeLife","OptionsController","useState","settings","options","setOptions","toggleSwitch","event","target","checked","handleOptionsChange","parseInt","value","getSettings","margin","FormControl","TextField","required","id","label","defaultValue","variant","onChange","autoComplete","color","FormControlLabel","control","Switch","syncing","Transition","React","forwardRef","ref","Slide","direction","EndDialog","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","useStyles","makeStyles","list","fullList","MainPage","useRef","worldModel","setWorldModel","worldModelRef","setTurnDisplay","turnDisplayRef","timerInterval","timerIntervalRef","settingsState","setSettingsState","drawerState","setDrawerState","toggleDrawer","generateWorld","newState","current","advanceTurn","stopTimer","interval","clearInterval","pop","setInterval","Drawer","data","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bcdc8d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {EmojiNature, LocalFlorist, Warning } from \"@material-ui/icons\";\r\n\r\nfunction FeatureSymbol(props)\r\n{\r\n    let dangerSymbol=\"%☠\";\r\n    let foodSymbol=\"x❁\";\r\n    let extraInfo=\"\";\r\n    let feature=props.feature;\r\n    function featureIcon(feature)\r\n    {\r\n        switch(feature.name)\r\n        {\r\n            case 'Hive':\r\n                return <EmojiNature/>;\r\n            case 'Danger':\r\n                return <Warning/>;\r\n            case 'Food':\r\n                return <LocalFlorist/>;\r\n            default:\r\n                return <div/>;\r\n        }\r\n    }\r\n\r\n    function featureExtraInfo()\r\n    {\r\n        switch(feature.name)\r\n        {\r\n            case 'Danger':\r\n                return feature.chance+dangerSymbol;\r\n            case 'Food':\r\n                return feature.charges+foodSymbol;\r\n            default:\r\n                return \"\";\r\n        }\r\n        \r\n    }\r\n\r\n    return (<div style={{}}>\r\n        {featureIcon(props.feature)} <div style={{fontSize:\"xx-small\", marginTop:\"-5px\"}}>{featureExtraInfo()}</div>\r\n    </div>)\r\n}\r\n\r\nexport default FeatureSymbol;","import { BorderColor, EmojiNature, LocalFlorist, PinDropSharp, Warning } from \"@material-ui/icons\";\r\nimport FeatureSymbol from \"./FeatureSymbol\";\r\n\r\nfunction GridTile(props)\r\n{\r\n    let numBees = props.numBees;\r\n    let feature = props.feature;\r\n    let location = props.xLoc +\", \"+props.yLoc;\r\n    let beeFont=\"x𓆤\";\r\n    let beeDead = \"x☠\";\r\n    let status=props.status;\r\n    let deadBees=props.deadBees;\r\n\r\n    const styles = {\r\n        parentDiv:\r\n        {\r\n            position:'relative',\r\n            display:\"flex\", \r\n            height:'50px',\r\n            width:'50px', \r\n            borderStyle:\"solid\", \r\n            borderWidth:\"1px\", \r\n            fontSize:\"small\"\r\n        },\r\n        beeDiv:\r\n        {\r\n            position:\"absolute\",\r\n            top:0,\r\n            right:0,\r\n            fontSize:\"x-small\"\r\n        },\r\n        featureDiv:\r\n        {\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            top: \"50%\",\r\n            transform: \"translate(-50%, -50%)\"\r\n        },\r\n        locationDiv:\r\n        {\r\n            position:\"absolute\",\r\n            fontSize:\"xx-small\",\r\n            left:0,\r\n            bottom:0\r\n        },\r\n        deadBeeDiv:\r\n        {\r\n            position:\"absolute\",\r\n            fontSize:\"xx-small\",\r\n            right:0,\r\n            bottom:0\r\n        }\r\n    };\r\n\r\n    function getParentStyle()\r\n    {\r\n       let style = styles.parentDiv;\r\n        switch(status)\r\n        {            \r\n            case \"Hive\":\r\n                style.borderColor=\"Yellow\";\r\n                style.backgroundColor=\"\t#CC9900\";\r\n                break;            \r\n            case \"BorderExplored\":\r\n                style.borderColor=\"Blue\";\r\n                style.backgroundColor=\"Green\";\r\n                break;\r\n            case \"Unexplored\":\r\n                style.borderColor=\"Blue\";\r\n                break;\r\n            case \"Explored\":\r\n                style.borderColor=\"White\";\r\n                style.backgroundColor=\"Grey\";\r\n                break;\r\n        }\r\n        return style;\r\n    }\r\n\r\n    function featureIcon(feature)\r\n    {\r\n        switch(feature.name)\r\n        {\r\n            case 'Hive':\r\n                return <EmojiNature/>;\r\n            case 'Danger':\r\n                return <Warning/>;\r\n            case 'Food':\r\n                return <LocalFlorist/>;\r\n            default:\r\n                return <div/>;\r\n    \r\n        }\r\n    }\r\n\r\n    return(\r\n    <div key={location} style={getParentStyle()}>\r\n        {numBees>0 ? <div style={styles.beeDiv}>{numBees+beeFont}</div> : <div/> }\r\n        {<div style={styles.featureDiv}><FeatureSymbol feature={props.feature} /></div>}\r\n        {<div style={styles.locationDiv}>{location}</div>}\r\n        {deadBees>0 ? <div style={styles.deadBeeDiv}>{deadBees+beeDead}</div>: <div/>}\r\n    </div>);\r\n}\r\n\r\nexport default GridTile;","import Button from '@material-ui/core/Button'\r\nimport GridTile from './GridTile';\r\n\r\nfunction Grid(props)\r\n{\r\n    const gridModel = props.gridModel;\r\n    let fullModel=gridModel.fullGridModel;\r\n\r\n    function getJSXTile(tile)\r\n    {\r\n        console.log(\"tile\", tile);\r\n        let workingJSXTile = <GridTile key={tile.xLoc+\"-\"+tile.yLoc} \r\n        numBees={tile.numBees} \r\n        feature={tile.feature} \r\n        xLoc={tile.xLoc} \r\n        yLoc={tile.yLoc}\r\n        status={tile.status}\r\n        deadBees={tile.deadBees}\r\n        />\r\n        return workingJSXTile;\r\n    }\r\n\r\n    function generateGrid()\r\n    {\r\n    let gridJSX=[[]];\r\n    let workingKey=\"\";\r\n    //console.log(\"generating jsx grid for\", gridModel);\r\n       for (let x in fullModel)\r\n       {\r\n           let tiles=[];\r\n        for(let y in fullModel[x])\r\n        {\r\n            tiles.push(getJSXTile(fullModel[x][y]))\r\n        }\r\n        gridJSX.push(<div style={{display:'flex'}}>{tiles}</div>)\r\n       }\r\n       return gridJSX;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        {\r\n            generateGrid()\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;","import GridTile from '../components/GridTile';\r\n\r\nclass TileClass\r\n{\r\n    feature=false;\r\n    numBees=0;\r\n    xLoc=\"\";\r\n    yLoc=\"\";\r\n    status=\"Unexplored\";\r\n    deadBees=0;\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.feature=false;\r\n        this.numBees=0;\r\n        this.xLoc=x;\r\n        this.yLoc=y;\r\n        this.deadBees=0;\r\n    }\r\n\r\n    get getFeature()\r\n    {\r\n        return this.feature;\r\n    }\r\n    set setFeature(newFeature)\r\n    {\r\n        this.feature=newFeature;\r\n    }\r\n\r\n    get getNumBees()\r\n    {\r\n        return this.numBees;\r\n    }\r\n\r\n    set setNumBees(numBees){\r\n        this.numBees=numBees;\r\n    }\r\n\r\n    subtractFood()\r\n    {\r\n        if (this.feature.charges>0)\r\n        this.feature.charges--;\r\n    }\r\n\r\n    addBee()\r\n    {\r\n        this.numBees++;\r\n    }\r\n    removeBee()\r\n    {\r\n        if(this.numBees>0)\r\n        this.numBees--;\r\n    }\r\n    addDeadBee()\r\n    {\r\n        this.deadBees++;\r\n    }\r\n    getNumBees()\r\n    {\r\n        return this.numBees;\r\n    }\r\n    \r\n    \r\n}\r\n\r\nexport default TileClass","import TileClass from \"./tileClass\";\r\nclass GridClass\r\n{\r\n    fullGridModel;\r\n    numDanger;\r\n    numFood;\r\n    seed;\r\n    hiveLocation;\r\n    maxHeight;\r\n    maxWidth;\r\n    constructor(mapOptions)\r\n    {\r\n        this.maxHeight=mapOptions.height;\r\n        this.maxWidth=mapOptions.width;\r\n        this.numDanger=mapOptions.numDanger;\r\n        this.numFood=mapOptions.numFood;\r\n        if(mapOptions.seed)\r\n        {\r\n            this.seed=mapOptions.seed;\r\n        }\r\n        else{\r\n        }\r\n        \r\n        this.fullGridModel=this.generateBaseGridModel(mapOptions.height, mapOptions.width);\r\n        this.gridAddFeatures();\r\n        this.updateBorderExploreTiles(this.fullGridModel);\r\n    }  \r\n\r\n    generateBaseGridModel(height, width)\r\n    {\r\n        let workingGrid=[];\r\n            for (let x=0; x<height; x++)\r\n            {\r\n                workingGrid[x]=[];\r\n           \r\n            for (let y=0; y<width; y++)\r\n            {\r\n                workingGrid[x][y]=new TileClass(x, y);\r\n            }\r\n        }\r\n        console.log(\"working grid\", workingGrid);\r\n        return workingGrid;\r\n    }\r\n\r\n    gridAddFeatures(numDangers, height, width, numFood)\r\n    {\r\n        if (numDangers> ((height * width)-(numFood+1)))\r\n        {\r\n            return false;\r\n        }\r\n        if (numFood>((height * width)-(numDangers+1)))\r\n        {\r\n            return false;\r\n        }\r\n        let gridAsList = [];\r\n        for (let x in this.fullGridModel)\r\n        {\r\n            for (let y in this.fullGridModel[x])\r\n            {\r\n                if (this.fullGridModel[x][y].feature===false)\r\n                {\r\n                    gridAsList.push({x:x, y:y});\r\n                }\r\n            }\r\n        }\r\n        //have grid as list, going to pop off entries as items are placed\r\n       \r\n        //addHive\r\n        //addFood\r\n        //addDanger\r\n       // console.log(\"grid as list before adds\", gridAsList)\r\n        this.gridAddHive(gridAsList);\r\n        this.gridAddFood(gridAsList);\r\n        this.gridAddDanger(gridAsList);\r\n        //console.log(\"grid as list after hive\", gridAsList);\r\n      //  console.log(\"full gridmodel after addfeatures\", this.fullGridModel);\r\n    }\r\n    gridAddFood(gridAsList)\r\n    {\r\n        for (let i=0; i<this.numFood; i++)\r\n        {\r\n            let tempLoc = Math.floor(Math.random() * gridAsList.length);\r\n          //  console.log(\"food location \" + i + \": \" + gridAsList[tempLoc].x, gridAsList[tempLoc].y);\r\n           // console.log(this.fullGridModel[gridAsList[tempLoc].x][gridAsList[tempLoc].y])\r\n            this.fullGridModel[gridAsList[tempLoc].x][gridAsList[tempLoc].y].feature={name:\"Food\", charges:5};\r\n            gridAsList.splice(tempLoc, 1);\r\n        }\r\n       \r\n    }\r\n    gridAddDanger(gridAsList)\r\n    {\r\n        for (let i=0; i<this.numDanger; i++)\r\n        {\r\n            let tempLoc = Math.floor(Math.random() * gridAsList.length);\r\n         //   console.log(\"danger location \" + i + \": \" + gridAsList[tempLoc].x, gridAsList[tempLoc].y);\r\n         //   console.log(this.fullGridModel[gridAsList[tempLoc].x][gridAsList[tempLoc].y])\r\n            this.fullGridModel[gridAsList[tempLoc].x][gridAsList[tempLoc].y].feature={name:\"Danger\", chance:30};\r\n            gridAsList.splice(tempLoc, 1);\r\n        }\r\n        //console.log(\"grid as list after danger\", gridAsList);\r\n    }\r\n    gridAddHive(gridAsList)\r\n    {\r\n        let hiveLoc = Math.floor(Math.random() * gridAsList.length);\r\n    //    console.log(\"Hive location\", gridAsList[hiveLoc]);\r\n        this.hiveLocation=gridAsList[hiveLoc];\r\n        this.fullGridModel[this.hiveLocation.x][this.hiveLocation.y].feature={name:\"Hive\"};\r\n        this.fullGridModel[this.hiveLocation.x][this.hiveLocation.y].status=\"Hive\";\r\n        gridAsList.splice(hiveLoc, 1);\r\n        return gridAsList;\r\n    }\r\n\r\n    updateBorderExploreTiles(grid)\r\n    {\r\n       let exploredTiles= this.getExploredtiles(grid);\r\n\r\n       for (let tile in exploredTiles)\r\n       {\r\n           this.updateExploreNeighbors(exploredTiles[tile], grid);\r\n       }\r\n    }\r\n\r\n    updateExploreNeighbors(tile, grid)\r\n    {\r\n        let x=tile.xLoc;\r\n        let y=tile.yLoc;\r\n        if(grid[x-1]?.[y]?.status===\"Unexplored\")\r\n        {\r\n            grid[x-1][y].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x+1]?.[y]?.status===\"Unexplored\")\r\n        {\r\n            grid[x+1][y].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x]?.[y-1]?.status===\"Unexplored\")\r\n        {\r\n            grid[x][y-1].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x]?.[y+1]?.status===\"Unexplored\")\r\n        {\r\n            grid[x][y+1].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x-1]?.[y-1]?.status===\"Unexplored\")\r\n        {\r\n            grid[x-1][y-1].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x+1]?.[y-1]?.status===\"Unexplored\")\r\n        {\r\n            grid[x+1][y-1].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x-1]?.[y+1]?.status===\"Unexplored\")\r\n        {\r\n            grid[x-1][y+1].status=\"BorderExplored\";\r\n        }\r\n        if(grid[x+1]?.[y+1]?.status===\"Unexplored\")\r\n        {\r\n            grid[x+1][y+1].status=\"BorderExplored\";\r\n        }\r\n    }\r\n\r\n    getExploredtiles(grid)\r\n    {\r\n        let exploredArray=[];\r\n        for(let x in grid)\r\n        {\r\n            for(let y in grid[x])\r\n            {\r\n                if(grid[x][y].status==\"Explored\" || grid[x][y].status==\"Hive\")\r\n                {\r\n                    exploredArray.push(grid[x][y]);\r\n                }\r\n            }\r\n        }\r\n        console.log(\"ExploredArray\", exploredArray);\r\n        return exploredArray;\r\n    }\r\n\r\n    getFoodTiles(grid)\r\n    {\r\n        let foodTileArray=[];\r\n        for(let x in grid)\r\n        {\r\n            for(let y in grid[x])\r\n            {\r\n                if(grid[x][y].status==\"Explored\" && grid[x][y].feature.name==\"Food\" && grid[x][y].feature.charges>0)\r\n                {\r\n                    foodTileArray.push(grid[x][y]);\r\n                }\r\n            }\r\n        }\r\n        console.log(\"food tile array\", foodTileArray);\r\n        return foodTileArray;\r\n    }\r\n\r\n    get getHiveLocation()\r\n    {\r\n        return this.hiveLocation;\r\n    }\r\n    set setHiveLocation(newLocation)\r\n    {\r\n        this.hiveLocation=newLocation;\r\n    }\r\n}\r\nexport default GridClass;","class BeeClass {\r\n    memory;\r\n    worldGrid;\r\n    alive = true;\r\n    key = \"\";\r\n    xLoc;\r\n    yLoc;\r\n    constructor(gridModel, beeKey) {\r\n        this.alive = true;\r\n        //deep copy memory\r\n        this.worldGrid = gridModel;\r\n        this.memory = JSON.parse(JSON.stringify(gridModel.fullGridModel));\r\n        this.key = beeKey;\r\n        this.xLoc = gridModel.hiveLocation.x;\r\n        this.yLoc = gridModel.hiveLocation.y;\r\n    }\r\n    copyMemory(model) {\r\n        this.memory = JSON.parse(JSON.stringify(model));\r\n        console.log(\"memory after copy\", this.memory);\r\n    }\r\n\r\n    moveToTile(tile) {\r\n        //remove bee from origonal tile\r\n        this.worldGrid.fullGridModel[this.xLoc][this.yLoc].removeBee();\r\n        //move to tile (increment bee on tile), check for danger, if danger, roll for death\r\n        let moveTile = this.worldGrid.fullGridModel[tile.xLoc][tile.yLoc];\r\n        if (moveTile.feature?.name === \"Danger\") {\r\n            if (Math.floor(Math.random() * 100) <= moveTile.feature.chance) {\r\n                //bee has died\r\n                moveTile.addDeadBee();\r\n                return false;\r\n            }\r\n        }\r\n        moveTile.addBee();\r\n        this.xLoc = tile.xLoc;\r\n        this.yLoc = tile.yLoc;\r\n        return true;\r\n    }\r\n\r\n    explorePhase(planning, avoidArray) {\r\n        //find tiles to be explored in memory\r\n        let exploreArray = this.findToExplore();\r\n        //remove avoids to if planning is true\r\n        if (planning === true) {\r\n            this.removeAvoids(exploreArray, avoidArray);\r\n        }\r\n        if (exploreArray.length === 0) {\r\n            let startTile = this.worldGrid.fullGridModel[this.xLoc][this.yLoc];\r\n            return startTile;\r\n        }\r\n        //choose randomly from the array\r\n        let tempLoc = Math.floor(Math.random() * exploreArray.length);\r\n        let moveTile = exploreArray[tempLoc];\r\n        //  console.log(\"moveTile\", moveTile);\r\n        // console.log(\"exploreArray\", exploreArray);\r\n        //move there\r\n        let success = this.moveToTile(moveTile);\r\n        if (success === false) {\r\n            //bee died, return false\r\n            this.alive = false;\r\n            return false;\r\n        }\r\n        else {\r\n            //update memory\r\n            this.memory[moveTile.xLoc][moveTile.yLoc].status = \"Explored\";\r\n            this.worldGrid.updateBorderExploreTiles(this.memory);\r\n        }\r\n        //return location where moved\r\n        return moveTile;\r\n    }\r\n\r\n    gatherPhase(planning, avoidArray) {\r\n        //find tiles to be explored in memory\r\n     \r\n        let gatherArray = this.worldGrid.getFoodTiles(this.memory);\r\n        //remove avoids to if planning is true\r\n        if (planning === true) {\r\n        //    console.log(\"gather array v avoid array\", gatherArray, avoidArray);\r\n            this.removeAvoids(gatherArray, avoidArray);\r\n        }\r\n        if (gatherArray.length === 0) {\r\n            let startTile = this.worldGrid.fullGridModel[this.xLoc][this.yLoc];\r\n            return startTile;\r\n        }\r\n        //choose randomly from the array\r\n        let tempLoc = Math.floor(Math.random() * gatherArray.length);\r\n        let moveTile = gatherArray[tempLoc];\r\n        //  console.log(\"moveGatherTile\", moveTile);\r\n     //    console.log(\"gatherArray\", gatherArray);\r\n        //move there\r\n        let success = this.moveToTile(moveTile);\r\n        if (success === false) {\r\n            this.alive = false;\r\n            return false;\r\n        }\r\n        this.memory[this.xLoc][this.yLoc].feature.charges--;\r\n        this.worldGrid.fullGridModel[this.xLoc][this.yLoc].subtractFood();\r\n        //return location where moved\r\n        return moveTile;\r\n    }\r\n\r\n\r\n    findToExplore() {\r\n        let exploreArray = [];\r\n        for (let x in this.memory) {\r\n            for (let y in this.memory[x]) {\r\n                if (this.memory[x][y].status === \"BorderExplored\") {\r\n                    exploreArray.push(this.memory[x][y]);\r\n                }\r\n            }\r\n        }\r\n     //   console.log(\"memory in findtoExplore\", this.memory);\r\n     //   console.log(\"exploreArray\", exploreArray);\r\n        return exploreArray;\r\n    }\r\n\r\n    removeAvoids(exploreArray, avoidArray) {\r\n        for (let avoid in avoidArray) {\r\n            let avoidX = avoidArray[avoid].xLoc;\r\n            let avoidY = avoidArray[avoid].yLoc;\r\n            for (let explore in exploreArray) {\r\n                let exploreX = exploreArray[explore].xLoc;\r\n                let exploreY = exploreArray[explore].yLoc;\r\n                if (avoidX === exploreX && avoidY === exploreY) {\r\n                    //remove by splicing\r\n                    exploreArray.splice(explore, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getMemory() {\r\n        return this.memory;\r\n    }\r\n    updateMemory(memory) {\r\n\r\n    }\r\n}\r\n\r\nexport default BeeClass;","import BeeClass from \"./beeClass\";\r\n\r\nclass HiveClass {\r\n    location = \"\";\r\n    numBees;\r\n    beeArray = [];\r\n    unexploredTileArray = [];\r\n    worldGrid = \"\";\r\n    sharingMemory = true;\r\n    planning = true;\r\n    hiveMemory;\r\n\r\n    constructor(location, numBees, gridClass) {\r\n        this.location = location;\r\n        this.numBees = numBees;\r\n        this.worldGrid = gridClass;\r\n        this.hiveMemory = gridClass;\r\n        this.generateBees();\r\n    }\r\n\r\n    generateBees() {\r\n        for (let i = 0; i < this.numBees; i++) {\r\n            this.beeArray.push(new BeeClass(this.worldGrid, i));\r\n        }\r\n    }\r\n\r\n    startPhase() {\r\n        //move bees back to hive in preparation for explore phase\r\n        for (let bee in this.beeArray) {\r\n            if (this.beeArray[bee].alive) {\r\n                this.beeArray[bee].moveToTile(this.worldGrid.fullGridModel[this.location.x][this.location.y]);\r\n            }\r\n        }\r\n    }\r\n\r\n    explorePhase() {\r\n        /*bees look at their \"memory\" and select randomly from the list of explorable\r\n         tiles, if planning is on, then the tile is removed from other group lists as well\r\n         preventing bee overlap*/\r\n        let avoidTiles = [];\r\n        for (let bee in this.beeArray) {\r\n            // console.log('bee array', this.beeArray[bee])\r\n            if (this.beeArray[bee].alive === true) {\r\n                let moveTile = (this.beeArray[bee].explorePhase(this.planning, avoidTiles));\r\n                if (this.planning === true) {\r\n                    if (moveTile != false)\r\n                        avoidTiles.push(moveTile);\r\n                }\r\n            }\r\n        }\r\n        //update gridmodel\r\n        // console.log(\"avoidTiles\", avoidTiles);\r\n        for (let tile in avoidTiles) {\r\n            this.worldGrid.fullGridModel[avoidTiles[tile].xLoc][avoidTiles[tile].yLoc].status = \"Explored\";\r\n        }\r\n    }\r\n\r\n    gatherPhase() {\r\n        //get all food sources discovered in each bee\r\n        let avoidTiles = [];\r\n        for (let bee in this.beeArray) {\r\n            if (this.beeArray[bee].alive) {\r\n                let gatherTile = this.beeArray[bee].gatherPhase(this.planning, avoidTiles);\r\n              //  console.log(\"gathertile\", gatherTile);\r\n                if (gatherTile.feature.charges < 1) {\r\n                  //  console.log(\"this tile is empty of food\", gatherTile);\r\n                    avoidTiles.push(gatherTile);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    syncPhase() {\r\n        //move bees back to hive, then if sync is on, sync memories\r\n        for (let bee in this.beeArray) {\r\n            if (this.beeArray[bee].alive) {\r\n                this.beeArray[bee].moveToTile(this.worldGrid.fullGridModel[this.location.x][this.location.y]);\r\n            }\r\n        }\r\n        if (this.sharingMemory) {\r\n            this.syncBeeMemories();\r\n        }\r\n    }\r\n\r\n\r\n    syncBeeMemories() {\r\n        //get new memories from bees, then push new hive memory to bees\r\n        for (let bee in this.beeArray) {\r\n            //check if bee is alive before taking memory\r\n            if (this.beeArray[bee].alive === true) {\r\n                let tempMemory = this.beeArray[bee].getMemory();\r\n                this.syncToHiveMemory(tempMemory);\r\n            }\r\n        }\r\n        //if sharing memory\r\n        if (this.sharingMemory) {\r\n            this.beeArray.map(bee => this.syncToBeeMemory(bee))\r\n        }\r\n    }\r\n\r\n    syncToHiveMemory(memory) {\r\n     //   console.log(\"memory in syncToHiveMemory\", memory)\r\n        for (let x in memory) {\r\n            for (let y in memory[x]) {\r\n                if (memory[x][y].status === \"Explored\") {\r\n         //           console.log(\"hive memory in sync\", this.hiveMemory);\r\n                    this.hiveMemory.fullGridModel[x][y].status = \"Explored\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n    syncToBeeMemory(bee) {\r\n        bee.copyMemory(this.hiveMemory.fullGridModel);\r\n    }\r\n}\r\n\r\nexport default HiveClass;","import GridClass from \"./gridClass\";\r\nimport HiveClass from './hiveClass';\r\n\r\nclass WorldClass{\r\n    hive;\r\n    worldGrid;\r\n    gameplayOptions;\r\n    turnDisplay;\r\n    turnTracker=0;\r\n    subTurnCycle=[\r\n        \"Start\",\r\n        \"Explore\",\r\n        \"Sync\",\r\n        \"Gather\"\r\n    ];\r\n    endCase=false;\r\n    subTurnCycleActive=0;\r\n    constructor(mapOptions, gameplayOptions)\r\n    {\r\n        //create grid\r\n        this.worldGrid=new GridClass(mapOptions);\r\n        //create hive based on grid locations\r\n        this.hive=new HiveClass(this.worldGrid.hiveLocation, gameplayOptions.numBees, this.worldGrid);\r\n        this.gameplayOptions=gameplayOptions;\r\n        this.turnDisplay=this.updateTurnDisplay();\r\n    }\r\n\r\n    advanceTurn()\r\n    {\r\n        //figure out what is next turn, then update display and then execute turn\r\n        this.subTurnCycleActive++;\r\n        if(this.subTurnCycleActive==this.subTurnCycle.length)\r\n        {\r\n            this.turnTracker++;\r\n            this.subTurnCycleActive-=this.subTurnCycle.length;\r\n        }\r\n        this.turnDisplay=this.updateTurnDisplay();\r\n        console.log(\"New turn display\", this.turnDisplay);\r\n        //determine turn in switch and execute\r\n        this.executeTurn(this.subTurnCycle[this.subTurnCycleActive]);\r\n     //   this.updateFunctions.updateDisplay(this.turnDisplay);\r\n        //execute turn\r\n    }\r\n    updateTurnDisplay()\r\n    {\r\n        let workingDisplay =\"Turn: \"\r\n        workingDisplay+=this.turnTracker + \", \" + this.subTurnCycle[this.subTurnCycleActive];\r\n        return workingDisplay;\r\n    }\r\n    \r\n    executeTurn(stage)\r\n    {\r\n        switch(stage)\r\n        {\r\n            case \"Start\":\r\n            this.startStage();\r\n            break;\r\n            case \"Explore\":\r\n                this.exploreStage();\r\n                break;\r\n            case \"Sync\":\r\n                this.syncStage();\r\n                break;\r\n            case \"Gather\":\r\n                this.gatherStage();\r\n                break;\r\n            default:\r\n                console.log(\"incorrect stage\");\r\n        }\r\n    }\r\n\r\n    startStage()\r\n    {   //check for endgame statuses\r\n        //end cases is if all bees are dead (failure), or bees have explored world entirely (success)\r\n        this.endCase = this.checkEndCases();\r\n        if (this.endCase !== false) {\r\n            console.log(\"endCase\", this.endCase);\r\n        }\r\n        this.hive.startPhase();\r\n    }\r\n\r\n    exploreStage()\r\n    {\r\n        this.hive.explorePhase();        \r\n        this.worldGrid.updateBorderExploreTiles(this.worldGrid.fullGridModel);\r\n     //   console.log(\"startStage complete\", this.worldGrid);\r\n    }\r\n    gatherStage()\r\n    {\r\n        this.hive.gatherPhase();\r\n    }\r\n    syncStage()\r\n    {\r\n        this.hive.syncPhase();\r\n    }\r\n\r\n    checkEndCases() {\r\n        if (!this.checkBeeLife()) {\r\n            return \"Bee Death\";\r\n        }\r\n        for (let x in this.worldGrid.fullGridModel) {\r\n            for (let y in this.worldGrid.fullGridModel[x]) {\r\n                if (this.worldGrid.fullGridModel[x][y].status === \"Unexplored\" || this.worldGrid.fullGridModel[x][y].status === \"BorderExplored\") {\r\n                    //false, bees have more to explore\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        //bees have won\r\n        return \"Bee victory\";\r\n    }\r\n    checkBeeLife() {\r\n        //check if any bees are alive\r\n        for (let bee in this.hive.beeArray) {\r\n            if (this.hive.beeArray[bee].alive) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexport default WorldClass;","import {Switch, FormControlLabel, FormControl, TextField, Button } from \"@material-ui/core\";\r\nimport React, { useState } from 'react';\r\n\r\nfunction OptionsController(props) {\r\n    const [options, setOptions] = useState(props.settings     \r\n    );\r\n    const styles=\r\n    {\r\n        controlPanel:{\r\n            paddingTop:\"20px\",\r\n            backgroundColor:\"White\",\r\n            boxShadow: \"10px 10px 5px black\",\r\n            borderRadius:\"20px\",\r\n            borderColor:\"Black\",\r\n            borderWidth:\"2px\"\r\n        }\r\n    }\r\n\r\n    function toggleSwitch(event) {\r\n        console.log(event.target.name)\r\n        setOptions({ ...options, [event.target.name]: event.target.checked });\r\n    }\r\n\r\n    function readSettings()\r\n    {\r\n        console.log(\"settings\", options);\r\n    }\r\n\r\n    function handleOptionsChange(event)\r\n    {\r\n       setOptions({...options, [event.target.name]:parseInt(event.target.value)});\r\n       props.getSettings({...options,[event.target.name]:parseInt(event.target.value)});\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{margin:\"10px\"}}>\r\n            <p>Settings:</p>\r\n        <FormControl>\r\n            <div>\r\n        <TextField\r\n        style={{margin:\"10px\"}}\r\n          required\r\n          id=\"foodInput\"\r\n          label=\"Food Instances\"\r\n          defaultValue={props.settings.numFood}\r\n          variant=\"outlined\"\r\n          onChange={handleOptionsChange}\r\n          name=\"numFood\"\r\n          autoComplete='off'\r\n        />\r\n        </div>\r\n        <div style={{margin:\"10px\"}}>\r\n        <TextField\r\n          id=\"dangerInput\"\r\n          label=\"Danger Instances\"\r\n          defaultValue={props.settings.numDanger}\r\n          variant=\"outlined\"\r\n          name=\"numDanger\"\r\n          onChange={handleOptionsChange}\r\n          autoComplete='off'\r\n        />\r\n        </div>\r\n        <div style={{margin:\"10px\"}}>\r\n        <TextField\r\n          id=\"beeInput\"\r\n          label=\"Number of Bees\"\r\n          defaultValue={props.settings.numBees}\r\n          variant=\"outlined\"\r\n          name=\"numBees\"\r\n          onChange={handleOptionsChange}\r\n          autoComplete='off'\r\n        />\r\n        </div>\r\n        <div style={{ margin:\"10px\"}}>\r\n            <TextField\r\n          required\r\n          id=\"heightInput\"\r\n          label=\"Map Height\"\r\n          defaultValue={props.settings.height}\r\n          variant=\"outlined\"\r\n          onChange={handleOptionsChange}\r\n          name=\"height\"\r\n          autoComplete='off'\r\n        />\r\n        </div>\r\n        <div style={{margin:\"10px\"}}>\r\n        <TextField\r\n            required\r\n          id=\"widthInput\"\r\n          defaultValue={props.settings.width}\r\n          label=\"Map Width\"\r\n          variant=\"outlined\"\r\n          onChange={handleOptionsChange}\r\n          name=\"width\"\r\n          autoComplete='off'\r\n        />\r\n        </div>\r\n        <div style={{color:\"black\"}}>\r\n            <div>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={props.settings.syncing}\r\n                            onChange={toggleSwitch}\r\n                            name=\"sharing\"\r\n                            color=\"primary\"\r\n                        />\r\n                    }\r\n                    label=\"Information Sharing\"\r\n                /></div> <div>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={props.settings.planning}\r\n                            onChange={toggleSwitch}\r\n                            name=\"planning\"\r\n                            color=\"primary\"\r\n                        />\r\n                    }\r\n                    label=\"Planning\"\r\n                />\r\n                </div>\r\n                </div> \r\n                \r\n            </FormControl>\r\n           \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default OptionsController;","import React from 'react';\r\nimport {Button} from '@material-ui/core'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n  \r\nfunction EndDialog(props){\r\n\r\n    const [open, setOpen] = React.useState(props.open);\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n    return(<Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"End of Simulation\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\">\r\n           End case reached: {props.endCase}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Okay\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      )\r\n}\r\n\r\nexport default EndDialog;","import Grid from '../components/GridComponent.js'\r\nimport Button from '@material-ui/core/Button'\r\nimport React, { useState, useRef } from 'react';\r\nimport WorldClass from '../dataClasses/worldClass.js';\r\nimport OptionsController from '../components/OptionsController.js';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport EndDialog from '../components/EndDialog.js';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nfunction MainPage() {\r\n  const classes = useStyles();\r\n  const [gridModel, setGridModel] = useState();\r\n  const gridModelRef = useRef(gridModel);\r\n  const [worldModel, setWorldModel] = useState();\r\n  const worldModelRef = useRef(worldModel);\r\n  const [turnDisplay, setTurnDisplay] = useState();\r\n  const turnDisplayRef = useRef(turnDisplay);\r\n  \r\n  const [timerInterval, setTimerInterval]=useState([]);\r\n  const timerIntervalRef = useRef(timerInterval);\r\n\r\n  const [settingsState, setSettingsState] = useState(\r\n    {\r\n      height: 10,\r\n      width: 10,\r\n      numDanger: 3,\r\n      numFood: 3,\r\n      seed: \"Default\",\r\n      numBees:3,\r\n      planning:true,\r\n      syncing:true\r\n    }\r\n  );\r\n\r\n  const [drawerState, setDrawerState] = useState({\r\n    left: false,\r\n  });\r\n\r\n  const toggleDrawer = (open) => () => {\r\n    setDrawerState({ ...drawerState, \"left\": open });\r\n  };\r\n\r\n  function updateTurnDisplay(newState) {\r\n    turnDisplayRef.current = newState;\r\n    setTurnDisplay(newState);\r\n  }\r\n\r\n  function updateGridModel(newState) {\r\n    gridModelRef.current = newState;\r\n    setGridModel(newState);\r\n  }\r\n\r\n  function updateWorldModel(newState) {\r\n    worldModelRef.current = newState;\r\n    setWorldModel(newState);\r\n  }\r\n\r\n  const getSettings = (data) =>\r\n  {\r\n    //console.log(\"data from settings\", data);\r\n    setSettingsState(data);\r\n  }\r\n\r\n  function generateWorld() {\r\n    console.log(\"settings for gen\", settingsState);\r\n    //get options and group them when controls exist\r\n    let mapOptions = {\r\n      height: settingsState.height,\r\n      width: settingsState.width,\r\n      numDanger: settingsState.numDanger,\r\n      numFood: settingsState.numFood,\r\n      seed: settingsState.seed\r\n      \r\n    }\r\n    let gameplayOptions = {\r\n      numBees: settingsState.numBees,\r\n      planning:true,\r\n      syncing:true\r\n    }\r\n    updateWorldModel(new WorldClass(mapOptions, gameplayOptions));\r\n  }\r\n\r\n  function advanceTurn() {\r\n    console.log(\"advancing turn\");\r\n    worldModelRef?.current?.advanceTurn();\r\n    //console.log(worldModel.turnDisplay);\r\n    updateTurnDisplay(worldModelRef?.current?.turnDisplay);\r\n  }\r\n\r\n  function autoRunToggle()\r\n  { \r\n    if(timerIntervalRef.current.length<1)\r\n    {\r\n      timerIntervalRef.current.push(setInterval(advanceTurn,1000));\r\n    }\r\n    else\r\n    {\r\n      stopTimer();\r\n    }\r\n  }\r\n\r\n  function stopTimer()\r\n  {\r\n    for (let interval in timerIntervalRef.current)\r\n      {\r\n      clearInterval(timerIntervalRef.current[interval]);\r\n      timerIntervalRef.current.pop(interval);\r\n      }\r\n  }\r\n\r\n  function resetWorld()\r\n  {\r\n    stopTimer();\r\n    generateWorld();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {(worldModel) ?\r\n          <div>\r\n            <p>{worldModel.turnDisplay}</p>\r\n            <Grid gridModel={worldModel.worldGrid} />\r\n            <Button onClick={() => advanceTurn()}>Advance Turn</Button>\r\n            <Button onClick={autoRunToggle}>Toggle AutoRun</Button>\r\n          </div> :\r\n          <Button onClick={() => generateWorld()}>Generate World</Button>}\r\n      </div>\r\n      {(worldModel?.endCase)? <EndDialog open={true} endCase={worldModel.endCase}/> : <div/>}\r\n      <Button onClick={toggleDrawer(true)}>{\"Settings\"}</Button>\r\n      <Drawer open={drawerState['left']} onClose={toggleDrawer(false)}>\r\n        {<div>\r\n          <OptionsController getSettings={getSettings} settings={settingsState}/>\r\n          <Button onClick={toggleDrawer(false)} >Close Settings</Button>\r\n        </div>}\r\n      </Drawer>\r\n      <Button onClick={()=>resetWorld()}>Reset</Button>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default MainPage;","import logo from './logo.svg';\nimport './App.css';\nimport MainPage from './pages/MainPage.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainPage/>\n      </header>\n    </div>\n  );\n}\n/*ATTRIBUTIONS*/\n/*HIVE SVG ICON BY: https://www.svgrepo.com/svg/320350/artificial-hive\nCOLLECTION: Game Skills Vectors\nLICENSE: CC Attribution License\nAUTHOR: game-icons.net\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}